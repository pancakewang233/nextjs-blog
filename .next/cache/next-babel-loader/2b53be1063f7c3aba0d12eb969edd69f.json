{"ast":null,"code":"var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { Column, CreateDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { Post } from './Post';\nimport { Comment } from './Comment';\nimport { getDatabaseConnection } from '../../lib/getDatabaseConnection';\nexport let User = (_dec = Entity('users'), _dec2 = PrimaryGeneratedColumn('increment'), _dec3 = Column('varchar'), _dec4 = Column('varchar'), _dec5 = CreateDateColumn({\n  type: 'timestamp'\n}), _dec6 = UpdateDateColumn({\n  type: 'timestamp'\n}), _dec7 = OneToMany(type => Post, post => post.author), _dec8 = OneToMany(type => Comment, comment => comment.user), _dec(_class = (_class2 = class User {\n  constructor() {\n    _initializerDefineProperty(this, \"id\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"username\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"passwordDigest\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"createdAt\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"updatedAt\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"posts\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"comments\", _descriptor7, this);\n\n    _defineProperty(this, \"errors\", {\n      username: [],\n      password: [],\n      passwordConfirmation: []\n    });\n\n    _defineProperty(this, \"password\", void 0);\n\n    _defineProperty(this, \"passwordConfirmation\", void 0);\n  }\n\n  async validate() {\n    if (this.username.trim() === '') {\n      this.errors.username.push('不能为空');\n    }\n\n    if (!/[a-zA-Z0-9]/.test(this.username.trim())) {\n      this.errors.username.push('格式不合法');\n    }\n\n    if (this.username.trim().length > 24) {\n      this.errors.username.push('太长');\n    }\n\n    if (this.username.trim().length <= 3) {\n      this.errors.username.push('太短');\n    }\n\n    const found = (await getDatabaseConnection()).manager.find(User, {\n      username: this.username\n    });\n\n    if (found) {\n      this.errors.username.push('已存在，不能重复注册');\n    }\n\n    if (this.password === '') {\n      this.errors.password.push('不能为空');\n    }\n\n    if (this.password !== this.passwordConfirmation) {\n      this.errors.passwordConfirmation.push('密码不匹配');\n    }\n  }\n\n  hasErrors() {\n    return !!Object.values(this.errors).find(v => v.length > 0);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"id\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"username\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"passwordDigest\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"createdAt\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"updatedAt\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"posts\", [_dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"comments\", [_dec8], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"sources":["D:/Pank/code/Pack/nextjs-blog/src/entity/User.ts"],"names":["Column","CreateDateColumn","Entity","OneToMany","PrimaryGeneratedColumn","UpdateDateColumn","Post","Comment","getDatabaseConnection","User","type","post","author","comment","user","username","password","passwordConfirmation","validate","trim","errors","push","test","length","found","manager","find","hasErrors","Object","values","v"],"mappings":"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","sourcesContent":["import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn\n} from 'typeorm';\nimport {Post} from './Post';\nimport {Comment} from './Comment';\nimport {JoinColumn} from 'typeorm/browser';\nimport {getDatabaseConnection} from '../../lib/getDatabaseConnection';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn('increment')\n  id: number;\n  @Column('varchar')\n  username: User;\n  @Column('varchar')\n  passwordDigest: string;\n  @CreateDateColumn({type: 'timestamp'})\n  createdAt: Date;\n  @UpdateDateColumn({type: 'timestamp'})\n  updatedAt: Date;\n  @OneToMany(type => Post, post => post.author)\n  posts: Post[];\n  @OneToMany(type => Comment, comment => comment.user)\n  comments: Comment[];\n\n  errors = {username: [] as string[], password: [] as string[], passwordConfirmation: [] as string[]};\n  password: string;\n  passwordConfirmation: string;\n\n  async validate() {\n    if (this.username.trim() === '') {\n      this.errors.username.push('不能为空');\n    }\n    if (!/[a-zA-Z0-9]/.test(this.username.trim())) {\n      this.errors.username.push('格式不合法');\n    }\n    if (this.username.trim().length > 24) {\n      this.errors.username.push('太长');\n    }\n    if (this.username.trim().length <= 3) {\n      this.errors.username.push('太短');\n    }\n    const found = (await getDatabaseConnection()).manager.find(User, {username: this.username});\n    if (found) {\n      this.errors.username.push('已存在，不能重复注册');\n    }\n    if (this.password === '') {\n      this.errors.password.push('不能为空');\n    }\n    if (this.password !== this.passwordConfirmation) {\n      this.errors.passwordConfirmation.push('密码不匹配');\n    }\n  }\n\n  hasErrors() {\n    return !!Object.values(this.errors).find(v => v.length > 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}