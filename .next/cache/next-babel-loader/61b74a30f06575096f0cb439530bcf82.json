{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createConnection, getConnectionManager } from 'typeorm';\nimport 'reflect-metadata';\nimport { Post } from 'src/entity/Post';\nimport { User } from 'src/entity/User';\nimport { Comment } from 'src/entity/Comment';\nimport config from 'ormconfig.json';\n\nconst create = async () => {\n  // @ts-ignore\n  return createConnection(_objectSpread(_objectSpread({}, config), {}, {\n    entities: [Post, User, Comment]\n  }));\n};\n\nconst promise = async function () {\n  const manager = getConnectionManager();\n  const hasDefaultConnection = manager.has('default');\n\n  if (!hasDefaultConnection) {\n    return create();\n  } else {\n    const current = manager.get('default');\n\n    if (current.isConnected) {\n      return current;\n    } else {\n      return create();\n    }\n  }\n}();\n\nexport const getDatabaseConnection = async () => {\n  return promise;\n};","map":{"version":3,"sources":["D:/Pank/code/Pack/nextjs-blog/lib/getDatabaseConnection.tsx"],"names":["createConnection","getConnectionManager","Post","User","Comment","config","create","entities","promise","manager","hasDefaultConnection","has","current","get","isConnected","getDatabaseConnection"],"mappings":";;;;;;AAAA,SAAQA,gBAAR,EAA0BC,oBAA1B,QAAqD,SAArD;AACA,OAAO,kBAAP;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;;AAEA,MAAMC,MAAM,GAAG,YAAY;AACzB;AACA,SAAON,gBAAgB,iCAClBK,MADkB;AAErBE,IAAAA,QAAQ,EAAE,CAACL,IAAD,EAAOC,IAAP,EAAaC,OAAb;AAFW,KAAvB;AAID,CAND;;AAQA,MAAMI,OAAO,GAAI,kBAAkB;AACjC,QAAMC,OAAO,GAAGR,oBAAoB,EAApC;AACA,QAAMS,oBAAoB,GAAGD,OAAO,CAACE,GAAR,CAAY,SAAZ,CAA7B;;AACA,MAAI,CAACD,oBAAL,EAA2B;AACzB,WAAOJ,MAAM,EAAb;AACD,GAFD,MAEO;AACL,UAAMM,OAAO,GAAGH,OAAO,CAACI,GAAR,CAAY,SAAZ,CAAhB;;AACA,QAAID,OAAO,CAACE,WAAZ,EAAyB;AACvB,aAAOF,OAAP;AACD,KAFD,MAEO;AACL,aAAON,MAAM,EAAb;AACD;AACF;AACF,CAbe,EAAhB;;AAeA,OAAO,MAAMS,qBAAqB,GAAG,YAAY;AAC/C,SAAOP,OAAP;AACD,CAFM","sourcesContent":["import {createConnection, getConnectionManager} from 'typeorm';\r\nimport 'reflect-metadata';\r\nimport {Post} from 'src/entity/Post';\r\nimport { User } from 'src/entity/User';\r\nimport {Comment} from 'src/entity/Comment'\r\nimport config from 'ormconfig.json'\r\n\r\nconst create = async () => {\r\n  // @ts-ignore\r\n  return createConnection({\r\n    ...config,\r\n    entities: [Post, User, Comment]\r\n  });\r\n};\r\n\r\nconst promise = (async function () {\r\n  const manager = getConnectionManager();\r\n  const hasDefaultConnection = manager.has('default');\r\n  if (!hasDefaultConnection) {\r\n    return create();\r\n  } else {\r\n    const current = manager.get('default');\r\n    if (current.isConnected) {\r\n      return current;\r\n    } else {\r\n      return create();\r\n    }\r\n  }\r\n})();\r\n\r\nexport const getDatabaseConnection = async () => {\r\n  return promise;\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}