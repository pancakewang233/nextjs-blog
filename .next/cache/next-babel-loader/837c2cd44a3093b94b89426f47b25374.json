{"ast":null,"code":"import { getDatabaseConnection } from '../../../lib/getDatabaseConnection';\nimport { User } from 'src/entity/User';\nimport md5 from 'md5';\n\nconst Users = async (req, res) => {\n  const {\n    username,\n    password,\n    passwordConfirmation\n  } = req.body;\n  const errors = {\n    username: [],\n    password: [],\n    passwordConfirmation: []\n  };\n\n  if (username.trim() === '') {\n    errors.username.push('不能为空');\n  }\n\n  if (!/[a-zA-Z0-9]/.test(username.trim())) {\n    errors.username.push('格式不合法');\n  }\n\n  if (username.trim().length > 24) {\n    errors.username.push('太长');\n  }\n\n  if (username.trim().length <= 3) {\n    errors.username.push('太短');\n  }\n\n  user.username = user;\n\n  if (password === '') {\n    errors.password.push('不能为空');\n  }\n\n  if (password !== passwordConfirmation) {\n    errors.passwordConfirmation.push('密码不匹配');\n  }\n\n  const hasErrors = Object.values(errors).find(v => v.length > 0);\n  res.setHeader('Content-Type', 'application/json;charset=utf-8');\n\n  if (hasErrors) {\n    res.statusCode = 422;\n    res.write(JSON.stringify(errors));\n    res.end();\n  } else {\n    const connection = await getDatabaseConnection();\n    const user = new User();\n    user.username = username.trim();\n    user.passwordDigest = md5(password);\n    await connection.manager.save(user);\n    res.statusCode = 200;\n    res.write(JSON.stringify(user));\n  }\n\n  res.end();\n};\n\nexport default Users;","map":{"version":3,"sources":["D:/Pank/code/Pack/nextjs-blog/pages/api/v1/users.tsx"],"names":["getDatabaseConnection","User","md5","Users","req","res","username","password","passwordConfirmation","body","errors","trim","push","test","length","user","hasErrors","Object","values","find","v","setHeader","statusCode","write","JSON","stringify","end","connection","passwordDigest","manager","save"],"mappings":"AACA,SAAQA,qBAAR,QAAoC,oCAApC;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;;AAEA,MAAMC,KAAK,GAAG,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AACjE,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,MAA6CJ,GAAG,CAACK,IAAvD;AAEA,QAAMC,MAAM,GAAG;AACbJ,IAAAA,QAAQ,EAAE,EADG;AACaC,IAAAA,QAAQ,EAAE,EADvB;AACuCC,IAAAA,oBAAoB,EAAE;AAD7D,GAAf;;AAGA,MAAIF,QAAQ,CAACK,IAAT,OAAoB,EAAxB,EAA4B;AAC1BD,IAAAA,MAAM,CAACJ,QAAP,CAAgBM,IAAhB,CAAqB,MAArB;AACD;;AACD,MAAI,CAAC,cAAcC,IAAd,CAAmBP,QAAQ,CAACK,IAAT,EAAnB,CAAL,EAA0C;AACxCD,IAAAA,MAAM,CAACJ,QAAP,CAAgBM,IAAhB,CAAqB,OAArB;AACD;;AACD,MAAIN,QAAQ,CAACK,IAAT,GAAgBG,MAAhB,GAAyB,EAA7B,EAAiC;AAC/BJ,IAAAA,MAAM,CAACJ,QAAP,CAAgBM,IAAhB,CAAqB,IAArB;AACD;;AACD,MAAIN,QAAQ,CAACK,IAAT,GAAgBG,MAAhB,IAA0B,CAA9B,EAAiC;AAC/BJ,IAAAA,MAAM,CAACJ,QAAP,CAAgBM,IAAhB,CAAqB,IAArB;AACD;;AACDG,EAAAA,IAAI,CAACT,QAAL,GAAgBS,IAAhB;;AACA,MAAIR,QAAQ,KAAK,EAAjB,EAAqB;AACnBG,IAAAA,MAAM,CAACH,QAAP,CAAgBK,IAAhB,CAAqB,MAArB;AACD;;AACD,MAAIL,QAAQ,KAAKC,oBAAjB,EAAuC;AACrCE,IAAAA,MAAM,CAACF,oBAAP,CAA4BI,IAA5B,CAAiC,OAAjC;AACD;;AACD,QAAMI,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcR,MAAd,EAAsBS,IAAtB,CAA2BC,CAAC,IAAIA,CAAC,CAACN,MAAF,GAAW,CAA3C,CAAlB;AACAT,EAAAA,GAAG,CAACgB,SAAJ,CAAc,cAAd,EAA8B,gCAA9B;;AACA,MAAIL,SAAJ,EAAe;AACbX,IAAAA,GAAG,CAACiB,UAAJ,GAAiB,GAAjB;AACAjB,IAAAA,GAAG,CAACkB,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAef,MAAf,CAAV;AACAL,IAAAA,GAAG,CAACqB,GAAJ;AACD,GAJD,MAIO;AACL,UAAMC,UAAU,GAAG,MAAM3B,qBAAqB,EAA9C;AACA,UAAMe,IAAI,GAAG,IAAId,IAAJ,EAAb;AACAc,IAAAA,IAAI,CAACT,QAAL,GAAgBA,QAAQ,CAACK,IAAT,EAAhB;AACAI,IAAAA,IAAI,CAACa,cAAL,GAAsB1B,GAAG,CAACK,QAAD,CAAzB;AACA,UAAMoB,UAAU,CAACE,OAAX,CAAmBC,IAAnB,CAAwBf,IAAxB,CAAN;AACAV,IAAAA,GAAG,CAACiB,UAAJ,GAAiB,GAAjB;AACAjB,IAAAA,GAAG,CAACkB,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeV,IAAf,CAAV;AACD;;AACDV,EAAAA,GAAG,CAACqB,GAAJ;AACD,CAzCD;;AA2CA,eAAevB,KAAf","sourcesContent":["import {NextApiRequest, NextApiResponse} from 'next';\r\nimport {getDatabaseConnection} from '../../../lib/getDatabaseConnection';\r\nimport {User} from 'src/entity/User';\r\nimport md5 from 'md5';\r\n\r\nconst Users = async (req: NextApiRequest, res: NextApiResponse) => {\r\n  const {username, password, passwordConfirmation} = req.body;\r\n\r\n  const errors = {\r\n    username: [] as string[], password: [] as string[], passwordConfirmation: [] as string[]\r\n  };\r\n  if (username.trim() === '') {\r\n    errors.username.push('不能为空');\r\n  }\r\n  if (!/[a-zA-Z0-9]/.test(username.trim())) {\r\n    errors.username.push('格式不合法');\r\n  }\r\n  if (username.trim().length > 24) {\r\n    errors.username.push('太长');\r\n  }\r\n  if (username.trim().length <= 3) {\r\n    errors.username.push('太短');\r\n  }\r\n  user.username = user;\r\n  if (password === '') {\r\n    errors.password.push('不能为空');\r\n  }\r\n  if (password !== passwordConfirmation) {\r\n    errors.passwordConfirmation.push('密码不匹配');\r\n  }\r\n  const hasErrors = Object.values(errors).find(v => v.length > 0);\r\n  res.setHeader('Content-Type', 'application/json;charset=utf-8');\r\n  if (hasErrors) {\r\n    res.statusCode = 422;\r\n    res.write(JSON.stringify(errors));\r\n    res.end();\r\n  } else {\r\n    const connection = await getDatabaseConnection();\r\n    const user = new User();\r\n    user.username = username.trim();\r\n    user.passwordDigest = md5(password);\r\n    await connection.manager.save(user);\r\n    res.statusCode = 200;\r\n    res.write(JSON.stringify(user));\r\n  }\r\n  res.end();\r\n};\r\n\r\nexport default Users;\r\n"]},"metadata":{},"sourceType":"module"}