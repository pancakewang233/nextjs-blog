{"ast":null,"code":"import { createConnection, getConnectionManager } from 'typeorm';\nimport 'reflect-metadata';\nimport { Post } from '@/entity/Post';\n\nconst create = async () => {\n  // @ts-ignore\n  return createConnection({\n    entities: [Post]\n  });\n};\n\nconst promise = async function () {\n  const manager = getConnectionManager();\n  const hasDefaultConnection = manager.has('default');\n\n  if (!hasDefaultConnection) {\n    return create();\n  } else {\n    const current = manager.get('default');\n\n    if (current.isConnected) {\n      return current;\n    } else {\n      return create();\n    }\n  }\n}();\n\nexport const getDatabaseConnection = async () => {\n  return promise;\n};","map":{"version":3,"sources":["D:/Pank/code/Pack/nextjs-blog/lib/getDatabaseConnection.tsx"],"names":["createConnection","getConnectionManager","Post","create","entities","promise","manager","hasDefaultConnection","has","current","get","isConnected","getDatabaseConnection"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,oBAA1B,QAAqD,SAArD;AACA,OAAO,kBAAP;AACA,SAAQC,IAAR,QAAmB,eAAnB;;AAEA,MAAMC,MAAM,GAAG,YAAY;AACzB;AACA,SAAOH,gBAAgB,CAAC;AACtBI,IAAAA,QAAQ,EAAE,CAACF,IAAD;AADY,GAAD,CAAvB;AAGD,CALD;;AAOA,MAAMG,OAAO,GAAI,kBAAkB;AACjC,QAAMC,OAAO,GAAGL,oBAAoB,EAApC;AACA,QAAMM,oBAAoB,GAAGD,OAAO,CAACE,GAAR,CAAY,SAAZ,CAA7B;;AACA,MAAI,CAACD,oBAAL,EAA2B;AACzB,WAAOJ,MAAM,EAAb;AACD,GAFD,MAEO;AACL,UAAMM,OAAO,GAAGH,OAAO,CAACI,GAAR,CAAY,SAAZ,CAAhB;;AACA,QAAID,OAAO,CAACE,WAAZ,EAAyB;AACvB,aAAOF,OAAP;AACD,KAFD,MAEO;AACL,aAAON,MAAM,EAAb;AACD;AACF;AACF,CAbe,EAAhB;;AAeA,OAAO,MAAMS,qBAAqB,GAAG,YAAY;AAC/C,SAAOP,OAAP;AACD,CAFM","sourcesContent":["import {createConnection, getConnectionManager} from 'typeorm';\r\nimport 'reflect-metadata';\r\nimport {Post} from '@/entity/Post';\r\n\r\nconst create = async () => {\r\n  // @ts-ignore\r\n  return createConnection({\r\n    entities: [Post]\r\n  });\r\n};\r\n\r\nconst promise = (async function () {\r\n  const manager = getConnectionManager();\r\n  const hasDefaultConnection = manager.has('default');\r\n  if (!hasDefaultConnection) {\r\n    return create();\r\n  } else {\r\n    const current = manager.get('default');\r\n    if (current.isConnected) {\r\n      return current;\r\n    } else {\r\n      return create();\r\n    }\r\n  }\r\n})();\r\n\r\nexport const getDatabaseConnection = async () => {\r\n  return promise;\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}